# Configure a default setup, default_config includes these items - https://www.home-assistant.io/integrations/default_config
default_config:
automation: !include automations.yaml
cloud:
  alexa:
    filter:
      include_domains:
        - climate
        - light
        - switch
      exclude_entities:
        - light.bedroom_left
        - light.bedroom_right
        - light.desk
        - light.hallway_center
        - light.hallway_door
        - light.hallway_kitchen
        - light.kitchen
        - switch.kitchen
        - switch.night_mode
        - switch.office
        - switch.office_desk
        - switch.toggle_pi_hole
  google_actions:
    filter:
      include_domains:
        - climate
        - light
        - switch
      exclude_entities:
        - light.bedroom_left
        - light.bedroom_right
        - light.desk
        - light.hallway_center
        - light.hallway_door
        - light.hallway_kitchen
        - light.kitchen
        - switch.kitchen
        - switch.night_mode
        - switch.office
        - switch.office_desk
        - switch.toggle_pi_hole
#config:
#frontend:
#history:
##logbook:
##map:
#mobile_app:
##person:
script: !include scripts.yaml
#ssdp:
#sun:
#system_health:
#updater:
#zeroconf:
##zone:

logger:
  default: info

camera:
  - platform: generic
    name: jet_stream
    content_type: image/gif
    still_image_url: https://s.w-x.co/staticmaps/wu/wu/jetstream1200_cur/conus/animate.png
  - platform: generic
    name: YTZ
    still_image_url: http://www.metcam.navcanada.ca/dawc_images/wxcam/CYTZ/CYTZ_N-full-e.jpeg
  - platform: generic
    name: YYZ
    still_image_url: https://511on.ca/map/Cctv/loc33--2

ffmpeg:

group: !include groups.yaml

homeassistant:
  auth_providers:
    - type: legacy_api_password
      api_password: !secret api_password
    - type: trusted_networks
      trusted_networks: !secret local_lan
      allow_bypass_login: true
    - type: homeassistant
  customize: !include customize.yaml

homekit:
- filter:
    include_domains:
      - climate
      - light
      - switch
    exclude_entities:
      - switch.kitchen
      - switch.night_mode
      - switch.office
      - switch.office_desk
      - switch.toggle_pi_hole

http:
  cors_allowed_origins:
    - https://www.home.mustakim.com
    - https://mustakim.orgfree.com
    - https://alim.is
  ssl_certificate: /opt/filer/os/acme/*.home.mustakim.com/fullchain.cer
  ssl_key: /opt/filer/os/acme/*.home.mustakim.com/*.home.mustakim.com.key

light:
  - platform: switch
    name: kitchen
    entity_id: switch.kitchen
  - platform: switch
    name: office_desk
    entity_id: switch.office_desk

media_player:
  - platform: androidtv
    name: nvidia_oshield
    host: !secret oshield_ip
  - platform: androidtv
    name: nvidia_nshield
    host: !secret nshield_ip

notify:
  - name: alimustakim
    platform: twitter
    consumer_key: !secret alimustakim_consumer_key
    consumer_secret: !secret alimustakim_consumer_secret_key
    access_token: !secret alimustakim_access_token_key
    access_token_secret: !secret alimustakim_access_token_secret_key
  - name: forwardcomputers
    platform: twitter
    consumer_key: !secret forwardcomputers_consumer_key
    consumer_secret: !secret forwardcomputers_consumer_secret_key
    access_token: !secret forwardcomputers_access_token_key
    access_token_secret: !secret forwardcomputers_access_token_secret_key
  
panel_iframe:
#  adguard:
#     title: Adguard
#     icon: mdi:shield-check
#     url: !secret adguard_url
#  cockpit:
#     title: Cockpit
#     icon: mdi:tablet-dashboard
#     url: !secret cockpit_url
#  webcode:
#     title: Webcode
#     icon: mdi:microsoft-visual-studio-code
#     url: !secret webcode_url
#  deconz:
#     title: deCONZ
#     icon: mdi:zigbee
#     url: !secret deconz_url
#  zigbee2mqtt:
#     title: zigbee
#     icon: mdi:zigbee
#     url: !secret zigbee2mqtt_url
#  netdata:
#     title: Netdata
#     icon: mdi:counter
#     url: !secret docker_netdata_url

plant:
  Coleus:
    sensors:
      battery: sensor.kitchen_battery
      brightness: sensor.kitchen_light_intensity
      conductivity: sensor.kitchen_conductivity
      moisture: sensor.kitchen_moisture
      temperature: sensor.kitchen_temperature
    check_days: 3
    min_battery: 15
    min_brightness: 3000
    max_brightness: 70000
    min_conductivity: 350
    max_conductivity: 2000
    min_moisture: 15
    max_moisture: 60
    min_temperature: 10
    max_temperature: 35

python_script:

recorder:
  exclude:
    domains:
      - automation
      - binary_sensor
      - camera
      - device_tracker
      - light
      - media_player
      - person
      - plant
      - remote
      - script
      - sensors
      - sun
      - switch
      - weather
      - zone
  include:
    domains:
      - climate
    entities:
      - sensor.temperature
      - sensor.feels_like
      - sensor.temperature_in
      - sensor.humidity
      - sensor.humidity_in
      - sensor.speedtest_download
      - sensor.speedtest_ping
      - sensor.speedtest_upload
  purge_keep_days: 30

shell_command:
  clean_printer: !secret printer_cleaning_mode_url
  download_ec_forecast_toronto: /usr/bin/wget -O /tmp/toronto.xml https://dd.weather.gc.ca/citypage_weather/xml/ON/s0000458_e.xml
  download_printer_firmware: /usr/bin/wget -O /opt/filer/Firmware/HP_LaserJet_Pro_MFP_M130_M132_Ultra_MFP_M134_Printer_{{states('sensor.printer_latest_firmware')}}.rfu ftp://ftp.hp.com/pub/networking/software/pfirmware/HP_LaserJet_Pro_MFP_M130_M132_Ultra_MFP_M134_Printer_{{states('sensor.printer_latest_firmware')}}.rfu
  download_system_firmware: /usr/bin/wget -O /opt/filer/Firmware/NUC7i5BNK-BN{{states('sensor.sys_latest_firmware')}}.bio https://downloadmirror.intel.com/29347/eng/BN{{states('sensor.sys_latest_firmware')}}.bio
  macbook_sleep: !secret macbook_sleep_cmd
  pi_hole_enable: !secret pi_hole_enable_url
  pi_hole_disable: !secret pi_hole_disable_url

spotify:
  client_id: !secret spotify_client_id
  client_secret: !secret spotify_client_secret

sensor:
  - platform: rest
    name: aqhi
    resource: https://dd.weather.gc.ca/air_quality/aqhi/ont/observation/realtime/xml/AQ_OBS_FEUZB_CURRENT.xml
    scan_interval: 3600
    json_attributes_path: '$.*'
    value_template: '{{ value_json.conditionAirQuality.airQualityHealthIndex | round(0) }}'
  - platform: scrape
    name: pollen
    resource: https://www.theweathernetwork.com/ca/forecasts/pollen/ontario/toronto
    select: "#allergy_conditions > div.allergy-summary > div.summary-item.pollen > div.allergy-level"
    scan_interval: 3600
  - platform: scrape
    name: mold
    resource: https://www.theweathernetwork.com/ca/forecasts/pollen/ontario/toronto
    select: "#allergy_conditions > div.allergy-summary > div.summary-item.mold > div.allergy-level"
    scan_interval: 3600
  - platform: command_line
    name: flu
    command: "/usr/bin/wget -O - \"https://www.theweathernetwork.com/ca/health/ontario/toronto\" 2>&1 | awk -F '[ \"]' '/activity-colour/ {gsub(/_/,\" \",$4); print toupper( substr( $4, 1, 1 ) ) substr( $4, 2 )}'"
    scan_interval: 3600
  - platform: command_line
    name: ec_current_summary_text
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//currentConditions/condition/text()')[0]; print(rev[:250])\""
  - platform: command_line
    name: ec_current_icon
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//currentConditions/iconCode/text()'); print(*rev)\""
  - platform: command_line
    name: ec_1_name
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[1]/period/text()'); print(*rev)\""
  - platform: command_line
    name: ec_1_icon
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[1]/abbreviatedForecast/iconCode/text()'); print(*rev)\""
  - platform: command_line
    name: ec_1_summary_text
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[1]/textSummary/text()')[0]; print(rev[:250])\""
  - platform: command_line
    name: ec_2_name
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[2]/period/text()'); print(*rev)\""
  - platform: command_line
    name: ec_2_icon
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[2]/abbreviatedForecast/iconCode/text()'); print(*rev)\""
  - platform: command_line
    name: ec_2_summary_text
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[2]/textSummary/text()')[0]; print(rev[:250])\""
  - platform: command_line
    name: ec_3_name
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[3]/period/text()'); print(*rev)\""
  - platform: command_line
    name: ec_3_icon
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[3]/abbreviatedForecast/iconCode/text()'); print(*rev)\""
  - platform: command_line
    name: ec_3_summary_text
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[3]/textSummary/text()')[0]; print(rev[:250])\""
  - platform: command_line
    name: ec_4_name
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[4]/period/text()'); print(*rev)\""
  - platform: command_line
    name: ec_4_icon
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[4]/abbreviatedForecast/iconCode/text()'); print(*rev)\""
  - platform: command_line
    name: ec_4_summary_text
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[4]/textSummary/text()')[0]; print(rev[:250])\""
  - platform: command_line
    name: ec_5_name
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[5]/period/text()'); print(*rev)\""
  - platform: command_line
    name: ec_5_icon
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[5]/abbreviatedForecast/iconCode/text()'); print(*rev)\""
  - platform: command_line
    name: ec_5_summary_text
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[5]/textSummary/text()')[0]; print(rev[:250])\""
  - platform: command_line
    name: ec_6_name
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[6]/period/text()'); print(*rev)\""
  - platform: command_line
    name: ec_6_icon
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[6]/abbreviatedForecast/iconCode/text()'); print(*rev)\""
  - platform: command_line
    name: ec_6_summary_text
    command: "python3 -c \"import lxml.etree; doc=lxml.etree.parse('/tmp/toronto.xml'); rev=doc.xpath('//forecastGroup/forecast[6]/textSummary/text()')[0]; print(rev[:250])\""

  - platform: environment_canada
    station: ON/s0000458

  - platform: systemmonitor
    scan_interval: 5
    resources:
      - type: disk_use_percent
        arg: "/"
      - type: memory_use_percent
      - type: processor_use
      - type: swap_use_percent
  - platform: command_line
    command: python3 -c "import requests; print(requests.get('http://127.0.0.1:19999/api/v1/info').json()['host_labels']['_os_name'])"
    name: OS
    scan_interval: 86400
  - platform: command_line
    command: python3 -c "import requests; print(requests.get('http://127.0.0.1:19999/api/v1/info').json()['host_labels']['_os_version'])"
    name: Version
    scan_interval: 86400
  - platform: command_line
    command: python3 -c "import requests; print(requests.get('http://127.0.0.1:19999/api/v1/info').json()['host_labels']['_kernel_version'])"
    name: Kernel Version
    scan_interval: 86400
  - platform: command_line
    command: python3 -c "import requests; print(requests.get('http://127.0.0.1:2375/info').json()['ServerVersion'])"
    name: Docker Version
    scan_interval: 86400
  - platform: command_line
    command: python3 -c "import requests; print(requests.get('http://127.0.0.1:2375/info').json()['ContainersRunning'])"
    name: Docker Containers
    scan_interval: 86400
  - platform: command_line
    name: sys_family
    command: awk '{ printf "%s ", $1 }' /sys/class/dmi/id/product_family
    scan_interval: 86400
  - platform: command_line
    name: sys_name
    command: awk '{ printf "%s ", $1 }' /sys/class/dmi/id/product_name
    scan_interval: 86400
  - platform: command_line
    name: sys_current_firmware
    command: awk -F. '{print $3}' <  /sys/class/dmi/id/bios_version
    scan_interval: 86400
  - platform: command_line
    name: sys_latest_firmware
    command: python3 /config/scripts/intel_latest_firmware
    scan_interval: 86400
  - platform: rest
    scan_interval: 3600
    name: docker_github_version
    resource: https://api.github.com/repos/docker/docker-ce/releases/latest
    username: !secret github_user
    password: !secret github_token
    authentication: basic
    value_template: '{{ value_json.name }}'
    headers:
      Accept: application/vnd.github.v3+json
      Content-Type: application/json
      User-Agent: Home Assistant REST sensor
  - platform: netdata
    host: !secret server_ip
    scan_interval: 30
    resources:
      server_uptime_raw:
        data_group: "system.uptime"
        element: "uptime"
      server_system_processes_raw:
        data_group: "system.active_processes"
        element: "active"
      server_cpu_temp:
        data_group: "sensors.coretemp-isa-0000_temperature"
        element: "coretemp-isa-0000_temp1"
        icon: mdi:thermometer
  - platform: template
    sensors:
      server_system_processes:
        value_template: >-
          {{- states('sensor.netdata_server_system_processes_raw') | int -}}
      server_uptime:
        value_template: >-
            {% set uptime = states('sensor.netdata_server_uptime_raw') | float %}
            {% set updays = (uptime / 86400) | round(0, "floor") %}
            {% set uphours = uptime | timestamp_custom('%-H:%-M:%-S', false) | regex_replace('^0:','') %}
            {% if updays == 0 %}
                {{- uphours -}}
            {% elif updays == 1 %}
                {{- updays ~ " Day, " ~ uphours -}}
            {% else %}
                {{- updays ~ " Days, " ~ uphours -}}
            {% endif %}

  - platform: netdata
    host: !secret firewall_ip
    scan_interval: 30
    resources:
      firewall_uptime_raw:
        data_group: "system.uptime"
        element: "uptime"
      firewall_cpu_temp_raw:
        data_group: "sensors.temp_thermal_zone2_thermal_thermal_zone2"
        element: "sys_devices_virtual_thermal_thermal_zone2_temp"
      firewall_mem_free:
        data_group: "system.ram"
        element: "free"
  - platform: command_line
    name: firewall_latest_firmware
    command: python3 -c "import lxml.html; import requests; html=requests.get('https://downloads.openwrt.org'); doc=lxml.html.fromstring(html.text); rev=doc.xpath('/html/body/div/ul[1]/li/strong/a/text()')[0]; print(rev.split()[-1])"
    scan_interval: 86400
  - platform: command_line
    name: firewall_release
    command: !secret firewall_release
    scan_interval: 86400
  - platform: command_line
    name: firewall_mem_available
    command: !secret firewall_mem_available
    scan_interval: 86400
  - platform: command_line
    name: firewall_cpu_load
    command: !secret firewall_cpu_load
    unit_of_measurement: '%'
    scan_interval: 30
  - platform: template
    sensors:
      firewall_cpu_temp:
        value_template: >-
          {{- states('sensor.netdata_firewall_cpu_temp_raw') | round(0, "floor") -}}
        unit_of_measurement: '°C'
      firewall_model:
        value_template: "QOTOM Q330G4"
      firewall_uptime:
        value_template: >-
            {% set uptime = states('sensor.netdata_firewall_uptime_raw') | float %}
            {% set updays = (uptime / 86400) | round(0, "floor") %}
            {% set uphours = uptime | timestamp_custom('%-H:%-M:%-S', false) | regex_replace('^0:','') %}
            {% if updays == 0 %}
                {{- uphours -}}
            {% elif updays == 1 %}
                {{- updays ~ " Day, " ~ uphours -}}
            {% else %}
                {{- updays ~ " Days, " ~ uphours -}}
            {% endif %}
      firewall_mem_used:
        unit_of_measurement: '%'
        value_template: >-
            {% set m = float(states('sensor.firewall_mem_available')) %}
            {% set n = float(states('sensor.netdatat_firewall_mem_free')) %}
            {% if m == 'unknown' %} {% set m = 0 %}  {% endif %}
            {% if n == 'unknown' %} {% set n = 0 %}  {% endif %}
            {% if m != 0 -%}
                {{ ((n / m) * 100) | round(0, "ceil") }}
            {% else %}
                {{ 0 }}
            {% endif %}


  - platform: version
    name: installed_version
  - platform: uptime
    name: uptime_minutes
    scan_interval: 30
  - platform: template
    sensors:
      hass_uptime:
        value_template: >-
            {% set uptime = states('sensor.uptime_minutes') | float * 60 %}
            {% set updays = (uptime / 86400) | round(0, "floor") %}
            {% set uphours = uptime | timestamp_custom('%-H:%-M:%-S', false) | regex_replace('^0:','') %}
            {% if updays == 0 %}
                {{- uphours -}}
            {% elif updays == 1 %}
                {{- updays ~ " Day, " ~ uphours -}}
            {% else %}
                {{- updays ~ " Days, " ~ uphours -}}
            {% endif %}
  - platform: rest
    scan_interval: 3600
    name: hass_github_version
    resource: https://api.github.com/repos/home-assistant/home-assistant/releases/latest
    username: !secret github_user
    password: !secret github_token
    authentication: basic
    value_template: '{{ value_json.name }}'
    headers:
      Accept: application/vnd.github.v3+json
      Content-Type: application/json
      User-Agent: Home Assistant REST sensor

  - platform: command_line
    name: printer_latest_firmware
    command: python3 -c "import ftplib; ftp=ftplib.FTP('ftp.hp.com');ftp.login();ftp.cwd('/pub/networking/software/pfirmware');ftpd=ftp.nlst(); name='HP_LaserJet_Pro_MFP_M130_M132_Ultra_MFP_M134_Printer_'; found=[i for i in ftpd if name in i]; print (found[-1][found[-1].find(name)+len(name):found[-1].rfind('.rfu')])"
    scan_interval: 86400
  - platform: command_line
    name: printer_model
    command: !secret printer_model
    scan_interval: 86400
  - platform: command_line
    name: printer_sn
    command: !secret printer_sn
    scan_interval: 86400
  - platform: command_line
    name: printer_fw
    command: !secret printer_fw
    scan_interval: 3600
  - platform: snmp
    name: printer_toner
    host: !secret laser_ip
    baseoid: 1.3.6.1.2.1.43.11.1.1.6.1.1
    accept_errors: true
    scan_interval: 86400
  - platform: snmp
    name: printer_toner_now
    host: !secret laser_ip
    baseoid: 1.3.6.1.2.1.43.11.1.1.9.1.1
    accept_errors: true
    scan_interval: 1800
  - platform: snmp
    name: printer_toner_max
    host: !secret laser_ip
    baseoid: 1.3.6.1.2.1.43.11.1.1.8.1.1
    accept_errors: true
    scan_interval: 86400
  - platform: template
    sensors:
      printer_toner_pct:
        unit_of_measurement: '%'
        value_template: >-
            {% set m = float(states('sensor.printer_toner_max')) %}
            {% set n = float(states('sensor.printer_toner_now')) %}
            {% if m == 'unknown' %} {% set m = 0 %}  {% endif %}
            {% if n == 'unknown' %} {% set n = 0 %}  {% endif %}
            {% if m != 0 -%}
                {{ ((n / m) * 100) | round(0) }}
            {% else %}
                {{ 0 }}
            {% endif %}
  - platform: snmp
    name: printer_drum
    host: !secret laser_ip
    baseoid: 1.3.6.1.2.1.43.11.1.1.6.1.5
    accept_errors: true
    scan_interval: 86400
  - platform: snmp
    name: printer_drum_now
    host: !secret laser_ip
    baseoid: 1.3.6.1.2.1.43.11.1.1.9.1.5
    accept_errors: true
    scan_interval: 1800
  - platform: snmp
    name: printer_drum_max
    host: !secret laser_ip
    baseoid: 1.3.6.1.2.1.43.11.1.1.8.1.5
    accept_errors: true
    scan_interval: 86400
  - platform: template
    sensors:
      printer_drum_pct:
        unit_of_measurement: '%'
        value_template: >-
            {% set m = float(states('sensor.printer_drum_max')) %}
            {% set n = float(states('sensor.printer_drum_now')) %}
            {% if m == 'unknown' %} {% set m = 0 %}  {% endif %}
            {% if n == 'unknown' %} {% set n = 0 %}  {% endif %}
            {% if m != 0 -%}
                {{ ((n / m) * 100) | round(0) }}
            {% else %}
                {{ 0 }}
            {% endif %}
  - platform: snmp
    name: printer_pages
    host: !secret laser_ip
    baseoid: 1.3.6.1.2.1.43.10.2.1.4.1.1
    accept_errors: true
    scan_interval: 1800
  - platform: snmp
    name: printer_uptime
    host: !secret laser_ip
    baseoid: 1.3.6.1.2.1.1.3.0
    accept_errors: true
    scan_interval: 30
    value_template: >-
        {% set uptime = float(value) / 100 %}
        {% set updays = (uptime / 86400) | round(0, "floor") %}
        {% set uphours = uptime | timestamp_custom('%-H:%-M:%-S', false) | regex_replace('^0:','') %}
        {% if updays == 0 %}
            {{- uphours -}}
        {% elif updays == 1 %}
            {{- updays ~ " Day, " ~ uphours -}}
        {% else %}
            {{- updays ~ " Days, " ~ uphours -}}
        {% endif %}

  - platform: template
    sensors:
      temperature_in:
        friendly_name: Inside temperature
        unit_of_measurement: '°C'
        value_template: "{{ state_attr('climate.thermostat', 'current_temperature') }}"
      humidity_in:
        friendly_name: Inside humidity
        unit_of_measurement: '%'
        value_template: "{{ state_attr('climate.thermostat', 'current_humidity') }}"
      feels_like:
        friendly_name: Feels like
        unit_of_measurement: '°C'
        value_template: >-
          {% if not is_state('sensor.wind_chill', 'unknown') %}
            {{ states('sensor.wind_chill') }}
          {% elif not is_state('sensor.humidex', 'unknown') %}
            {{ states('sensor.humidex') }}
          {% else %}
            {{ states('sensor.temperature') }}
          {% endif %}

  - platform: template
    sensors:
      sun_next_rising:
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_rising')) | timestamp_custom(' %-I:%M %p') }}"
      sun_next_setting:
        value_template: "{{ as_timestamp(state_attr('sun.sun', 'next_setting')) | timestamp_custom(' %-I:%M %p') }}"

  - platform: time_date
    display_options:
      - 'time'
      - 'time_utc'
  - platform: worldclock
    name: UK
    time_zone: Europe/London
  - platform: worldclock
    name: San Francisco
    time_zone: America/Los_Angeles

  - platform: nut
    name: Office UPS
    username: ups
    host: !secret synology_ip
    resources:
      - ups.status.display
      - ups.load
      - battery.runtime
      - battery.charge
      - ups.status
  - platform: template
    sensors:
      office_ups_battery_runtime_mins:
        unit_of_measurement: 'min'
        value_template: "{{ float(states('sensor.office_ups_battery_runtime')) / 60 | round(2)}}"
      office_ups_model:
        value_template: "Back-UPS BX1500G"
      office_ups_serial_number:
        value_template: "3B1106X32967"
  - platform: template
    sensors:
      office_ups_status_data_short:
        value_template: "{{ states('sensor.office_ups_status_data').split(' ')[0] }}"

  - platform: snmp
    name: nas_name
    host: !secret synology_ip
    baseoid: 1.3.6.1.4.1.6574.1.5.1.0
    accept_errors: true
    scan_interval: 86400
  - platform: snmp
    name: nas_serial
    host: !secret synology_ip
    baseoid: 1.3.6.1.4.1.6574.1.5.2.0
    accept_errors: true
    scan_interval: 86400
  - platform: snmp
    name: nas_uptime
    host: !secret synology_ip
    baseoid: 1.3.6.1.2.1.25.1.1.0
    accept_errors: true
    scan_interval: 30
    value_template: >-
        {% set uptime = float(value) / 100 %}
        {% set updays = (uptime / 86400) | round(0, "floor") %}
        {% set uphours = uptime | timestamp_custom('%-H:%-M:%-S', false) | regex_replace('^0:','') %}
        {% if updays == 0 %}
            {{- uphours -}}
        {% elif updays == 1 %}
            {{- updays ~ " Day, " ~ uphours -}}
        {% else %}
            {{- updays ~ " Days, " ~ uphours -}}
        {% endif %}

  - platform: waqi
    token: !secret waqi_token_key
    locations: 'Toronto'

  - platform: template
    sensors:
      aqi:
        value_template: "{{ states('sensor.waqi_toronto') }}"
      o3:
        value_template: "{{ state_attr('sensor.waqi_toronto', 'ozone') }}"
      pm:
        value_template: "{{ state_attr('sensor.waqi_toronto', 'pm_2_5') }}"
      no2:
        value_template: "{{ state_attr('sensor.waqi_toronto', 'nitrogen_dioxide') }}"
      co:
        value_template: "{{ state_attr('sensor.waqi_toronto', 'co') }}"
      so2:
        value_template: "{{ state_attr('sensor.waqi_toronto', 'sulfur_dioxide') }}"
      aqhi_friendly:
        friendly_name: AQHI
        icon_template: mdi:chemical-weapon
        value_template: >-
          {% set l = states('sensor.aqhi') | int %}
          {% if l <= 3 %} Low
          {% elif l <= 6 %} Moderate
          {% elif l <= 10 %} High
          {% elif l > 10 %} Hazardous
          {% endif %}
      aqi_friendly:
        friendly_name: AQI
        icon_template: mdi:chemical-weapon
        value_template: >-
          {% set l = states('sensor.aqi') | int %}
          {% if l <= 99 %} Low
          {% elif l <= 149 %} Moderate
          {% elif l <= 199 %} High
          {% elif l > 199 %} Hazardous
          {% endif %}
      o3_friendly:
        friendly_name: O₃
        icon_template: mdi:earth
        value_template: >-
          {% set l = states('sensor.o3') | int %}
          {% if l < 0 %} unknown
          {% elif l <= 54 %} Good
          {% elif l <= 70 %} Moderate
          {% elif l <= 85 %} Unhealthy
          {% elif l > 85 %} Hazardous
          {% endif %}
      pm_friendly:
        friendly_name: PM₂.₅
        icon_template: mdi:chart-bubble
        value_template: >-
          {% set l = states('sensor.pm') | int %}
          {% if l < 0 %} unknown
          {% elif l <= 50 %} Good
          {% elif l <= 100 %} Moderate
          {% elif l <= 300 %} Unhealthy
          {% elif l > 300 %} Hazardous
          {% endif %}
      no2_friendly:
        friendly_name: NO₂
        icon_template: mdi:car
        value_template: >-
          {% set l = states('sensor.no2') | int %}
          {% if l < 0 %} unknown
          {% elif l <= 50 %} Good
          {% elif l <= 100 %} Moderate
          {% elif l <= 200 %} Unhealthy
          {% elif l > 200 %} Hazardous
          {% endif %}
      co_friendly:
        friendly_name: CO
        icon_template: mdi:fire
        value_template: >-
          {% set l = states('sensor.co') | float %}
          {% if l < 0 %} unknown
          {% elif l <= 4.4 %} Good
          {% elif l <= 9.4 %} Moderate
          {% elif l <= 15.4 %} Unhealthy
          {% elif l > 15.4 %} Hazardous
          {% endif %}
      so2_friendly:
        friendly_name: SO₂
        icon_template: mdi:factory
        value_template: >-
          {% set l = states('sensor.so2') | int %}
          {% if l < 0 %} unknown
          {% elif l <= 34 %} Good
          {% elif l <= 144 %} Moderate
          {% elif l <= 304 %} Unhealthy
          {% elif l > 304 %} Hazardous
          {% endif %}
      cigarettes:
        friendly_name: Cigarettes / Day
        icon_template: mdi:smoking
        unit_of_measurement: 'Cigarettes'
        value_template: >-
          {% if states('sensor.pm').isdigit() %}
            {{ ( float(states('sensor.pm')) / 22 ) | round(1) }}
          {% else %}
            {{ float(0) }}
          {% endif %}

      ec_current_summary:
        friendly_name: Currently
        value_template: >-
          Currently {{ states('sensor.temperature') }}°C (Feels like {{ states('sensor.feels_like') }}) and {{ states('sensor.ec_current_summary_text') }}
        entity_picture_template: >-
          "https://weather.gc.ca/weathericons/{{ states('sensor.ec_current_icon') }}.gif"
        icon_template: >-
          mdi:thermometer
      ec_1_summary:
        friendly_name_template: >-
          {{ states('sensor.ec_1_name') }}
        value_template: >-
          {{ states('sensor.ec_1_summary_text') }}
        entity_picture_template: >-
          "https://weather.gc.ca/weathericons/{{ states('sensor.ec_1_icon') }}.gif"
      ec_2_summary:
        friendly_name_template: >-
          {{ states('sensor.ec_2_name') }}
        value_template: >-
          {{ states('sensor.ec_2_summary_text') }}
        entity_picture_template: >-
          "https://weather.gc.ca/weathericons/{{ states('sensor.ec_2_icon') }}.gif"
      ec_3_summary:
        friendly_name_template: >-
          {{ states('sensor.ec_3_name') }}
        value_template: >-
          {{ states('sensor.ec_3_summary_text') }}
        entity_picture_template: >-
          "https://weather.gc.ca/weathericons/{{ states('sensor.ec_3_icon') }}.gif"
      ec_4_summary:
        friendly_name_template: >-
          {{ states('sensor.ec_4_name') }}
        value_template: >-
          {{ states('sensor.ec_4_summary_text') }}
        entity_picture_template: >-
          "https://weather.gc.ca/weathericons/{{ states('sensor.ec_4_icon') }}.gif"
      ec_5_summary:
        friendly_name_template: >-
          {{ states('sensor.ec_5_name') }}
        value_template: >-
          {{ states('sensor.ec_5_summary_text') }}
        entity_picture_template: >-
          "https://weather.gc.ca/weathericons/{{ states('sensor.ec_5_icon') }}.gif"
      ec_6_summary:
        friendly_name_template: >-
          {{ states('sensor.ec_6_name') }}
        value_template: >-
          {{ states('sensor.ec_6_summary_text') }}
        entity_picture_template: >-
          "https://weather.gc.ca/weathericons/{{ states('sensor.ec_6_icon') }}.gif"

  - platform: darksky
    api_key: !secret darksky_api_key
    forecast:
      - 0
      - 1
      - 2
      - 3
      - 4
      - 5
      - 6
    monitored_conditions:
      - precip_intensity_max

  - platform: miflora
    name: kitchen
    mac: !secret plant1_mac
    force_update: true
    monitored_conditions:
      - battery
      - conductivity
      - light
      - moisture
      - temperature

  - platform: nextbus
    agency: ttc
    route: 97
    stop: 8543
    scan_interval: 60
  - platform: template
    sensors:
      97north:
        friendly_name: '97 North'
        icon_template: mdi:bus-clock
        unit_of_measurement: 'min'
        value_template: '{{ state_attr("sensor.ttc_97", "upcoming").split(",")[0] }}'

  - platform: rest
    name: pi_hole_status
    method: GET
    resource: !secret pi_hole_status_url
    value_template: '{{ value_json.status }}'

input_boolean:
  night_mode_bool:
    initial: on

switch:
  - platform: template
    switches:
      night_mode:
        friendly_name: night
        value_template: '{{ states("input_boolean.night_mode_bool") }}'
        turn_on:
          - service: input_boolean.turn_on
            entity_id: input_boolean.night_mode_bool
        turn_off:
          - service: automation.trigger
            data:
              entity_id: automation.night
        icon_template: mdi:sleep
      toggle_pi_hole:
        friendly_name: Toggle Pi-hole
        value_template: "{{ is_state('sensor.pi_hole_status', 'enabled') }}"
        turn_on:
          service: shell_command.pi_hole_enable
        turn_off:
          service: shell_command.pi_hole_disable
